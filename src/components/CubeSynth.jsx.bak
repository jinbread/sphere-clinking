import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';
import * as Tone from 'tone';
import * as CANNON from 'cannon-es';

const CubeSynth = () => {
  const mountRef = useRef(null);
  const sceneRef = useRef(null);
  const sphereRef = useRef(null);
  const synthRef = useRef(null);
  const worldRef = useRef(null);
  const spheresRef = useRef([]);
  const physicsBodiesRef = useRef([]);
  const isDraggingRef = useRef(false);
  const startXRef = useRef(0);
  const startYRef = useRef(0);
  const pressStartTimeRef = useRef(0);
  const currentVolumeRef = useRef(-20);
  const currentNoteRef = useRef("C4");

  useEffect(() => {
    // Scene setup
    const scene = new THREE.Scene();
    sceneRef.current = scene;

    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 15, 0);  // 정확히 위에서 아래로
    camera.lookAt(0, 0, 0);
    camera.rotation.z = 0;  // 회전 없이 정확히 위에서 아래로

    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    mountRef.current.appendChild(renderer.domElement);

    // Physics world setup
    const world = new CANNON.World();
    world.gravity.set(0, -9.82, 0);
    world.broadphase = new CANNON.NaiveBroadphase();
    worldRef.current = world;

    // Create materials
    const sphereMaterial = new CANNON.Material('sphereMaterial');
    const floorPhysicsMaterial = new CANNON.Material('floorMaterial');

    // Create contact materials
    const sphereFloorContactMaterial = new CANNON.ContactMaterial(
      sphereMaterial,
      floorPhysicsMaterial,
      {
        friction: 0.3,
        restitution: 0.7
      }
    );

    const sphereSphereContactMaterial = new CANNON.ContactMaterial(
      sphereMaterial,
      sphereMaterial,
      {
        friction: 0.3,
        restitution: 0.8
      }
    );

    world.addContactMaterial(sphereFloorContactMaterial);
    world.addContactMaterial(sphereSphereContactMaterial);

    // Create floor
    const floorGeometry = new THREE.PlaneGeometry(30, 30);
    const floorVisualMaterial = new THREE.MeshPhongMaterial({ 
      color: 0xffffff,
      side: THREE.DoubleSide,
      transparent: true,
      opacity: 0.5
    });
    const floor = new THREE.Mesh(floorGeometry, floorVisualMaterial);
    floor.rotation.x = -Math.PI / 2;
    floor.position.y = -2;
    scene.add(floor);

    // Create floor physics body
    const floorShape = new CANNON.Plane();
    const floorBody = new CANNON.Body({
      mass: 0,
      shape: floorShape,
      material: floorPhysicsMaterial
    });
    floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);
    floorBody.position.set(0, -2, 0);
    world.addBody(floorBody);

    // Create walls
    const wallMaterial = new THREE.MeshPhongMaterial({ 
      color: 0xffffff,
      transparent: true,
      opacity: 0.3
    });
    const wallHeight = 10;
    const wallThickness = 1;
    const wallLength = 30;

    // Create wall meshes and physics bodies
    const walls = [
      // North wall
      { pos: [0, wallHeight/2 - 2, -wallLength/2], rot: [0, 0, 0] },
      // South wall
      { pos: [0, wallHeight/2 - 2, wallLength/2], rot: [0, 0, 0] },
      // East wall
      { pos: [wallLength/2, wallHeight/2 - 2, 0], rot: [0, Math.PI/2, 0] },
      // West wall
      { pos: [-wallLength/2, wallHeight/2 - 2, 0], rot: [0, Math.PI/2, 0] }
    ];

    walls.forEach(wall => {
      // Visual wall
      const wallGeometry = new THREE.BoxGeometry(wallLength, wallHeight, wallThickness);
      const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);
      wallMesh.position.set(...wall.pos);
      wallMesh.rotation.set(...wall.rot);
      scene.add(wallMesh);

      // Physics wall
      const wallShape = new CANNON.Box(new CANNON.Vec3(wallLength/2, wallHeight/2, wallThickness/2));
      const wallBody = new CANNON.Body({
        mass: 0,
        shape: wallShape,
        material: floorPhysicsMaterial
      });
      wallBody.position.set(...wall.pos);
      wallBody.quaternion.setFromEuler(...wall.rot);
      world.addBody(wallBody);
    });

    // Create main sphere
    const geometry = new THREE.SphereGeometry(1, 32, 32);
    const material = new THREE.MeshPhongMaterial({ 
      color: 0x00ff00,
      shininess: 30,
      flatShading: false
    });
    const sphere = new THREE.Mesh(geometry, material);
    scene.add(sphere);
    sphereRef.current = sphere;

    // Create physics body for main sphere
    const sphereShape = new CANNON.Sphere(1);
    const sphereBody = new CANNON.Body({
      mass: 1,
      position: new CANNON.Vec3(0, 10, 0),
      shape: sphereShape,
      material: sphereMaterial
    });
    world.addBody(sphereBody);
    physicsBodiesRef.current.push(sphereBody);

    // Create surrounding spheres
    const surroundingSpheres = [];
    const surroundingBodies = [];
    const numSpheres = 60;
    const radius = 8;
    const height = 5; // 모든 공의 초기 높이를 5로 고정

    for (let i = 0; i < numSpheres; i++) {
      const angle = (i / numSpheres) * Math.PI * 2; // 균일한 각도로 배치
      const distance = radius * (0.5 + (i % 3) * 0.2); // 3개의 원으로 배치
      const x = Math.cos(angle) * distance;
      const z = Math.sin(angle) * distance;
      const y = height; // 고정된 높이

      const surroundingSphere = new THREE.Mesh(
        geometry,
        new THREE.MeshPhongMaterial({
          color: 0x4444ff,
          shininess: 30,
          flatShading: false
        })
      );
      surroundingSphere.position.set(x, y, z);
      scene.add(surroundingSphere);
      surroundingSpheres.push(surroundingSphere);

      const body = new CANNON.Body({
        mass: 1,
        position: new CANNON.Vec3(x, y, z),
        shape: sphereShape,
        material: sphereMaterial
      });
      world.addBody(body);
      surroundingBodies.push(body);
    }

    spheresRef.current = surroundingSpheres;
    physicsBodiesRef.current.push(...surroundingBodies);

    // Add lights
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(0, 0, 1);
    scene.add(light);
    scene.add(new THREE.AmbientLight(0x404040));

    // Audio setup
    const synth = new Tone.PolySynth(Tone.Synth, {
      oscillator: {
        type: "sine",
        partials: [0, 2, 3, 4],
        phase: 0,
        harmonicity: 0.5
      },
      envelope: {
        attack: 0.005,
        decay: 0.1,
        sustain: 0.3,
        release: 1
      },
      portamento: 0.05
    }).toDestination();
    synthRef.current = synth;

    // Create collision sound synth
    const collisionSynth = new Tone.Synth({
      oscillator: {
        type: "sine"
      },
      envelope: {
        attack: 0.001,
        decay: 0.2,
        sustain: 0,
        release: 0.1
      }
    }).toDestination();

    // Add collision event listeners
    world.addEventListener('beginContact', (event) => {
      const bodyA = event.bodyA;
      const bodyB = event.bodyB;
      
      // Skip if either body is the floor (mass = 0)
      if (bodyA.mass === 0 || bodyB.mass === 0) return;
      
      // Calculate collision velocity
      const relativeVelocity = bodyA.velocity.vsub(bodyB.velocity);
      const impactVelocity = relativeVelocity.length();
      
      // Only play sound if impact is strong enough
      if (impactVelocity > 1) {
        // Map impact velocity to note frequency
        const note = Math.min(notes.length - 1, Math.floor(impactVelocity * 2));
        const volume = Math.min(0, -20 + impactVelocity * 5);
        
        collisionSynth.volume.value = volume;
        collisionSynth.triggerAttackRelease(notes[note], "32n");
      }
    });

    // 음계 배열 (C4부터 시작하는 2옥타브)
    const notes = [
      "C4", "C#4", "D4", "D#4", "E4", "F4", "F#4", "G4", "G#4", "A4", "A#4", "B4",
      "C5", "C#5", "D5", "D#5", "E5", "F5", "F#5", "G5", "G#5", "A5", "A#5", "B5"
    ];

    // 코드 정의
    const chords = {
      major: [0, 4, 7],      // 장3화음 (예: C-E-G)
      minor: [0, 3, 7],      // 단3화음 (예: C-Eb-G)
      diminished: [0, 3, 6], // 감3화음 (예: C-Eb-Gb)
      augmented: [0, 4, 8],  // 증3화음 (예: C-E-G#)
      sus4: [0, 5, 7],       // sus4 (예: C-F-G)
      sus2: [0, 2, 7]        // sus2 (예: C-D-G)
    };

    function getChordNotes(baseNoteIndex) {
      const chordType = Math.floor((event.clientX - startXRef.current + window.innerWidth/2) / (window.innerWidth/6)) % 6;
      const chordTypes = ['major', 'minor', 'diminished', 'augmented', 'sus4', 'sus2'];
      const selectedChord = chords[chordTypes[chordType]];
      
      return selectedChord.map(interval => {
        const noteIndex = (baseNoteIndex + interval) % notes.length;
        return notes[noteIndex];
      });
    }

    // Mouse interaction
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    function onMouseDown(event) {
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

      raycaster.setFromCamera(mouse, camera);
      // Only check intersection with the main sphere
      const intersects = raycaster.intersectObject(sphere);

      if (intersects.length > 0) {
        isDraggingRef.current = true;
        startXRef.current = event.clientX;
        startYRef.current = event.clientY;
        pressStartTimeRef.current = Date.now();
        currentVolumeRef.current = -20;
        
        sphereRef.current = sphere;
        
        const baseNoteIndex = notes.indexOf(currentNoteRef.current);
        const chordNotes = getChordNotes(baseNoteIndex);
        synth.triggerAttack(chordNotes);
      }
    }

    function onMouseMove(event) {
      if (isDraggingRef.current) {
        // Convert mouse position to world coordinates
        const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
        const mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
        
        // Create a plane at y=0 for intersection
        const plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);
        const raycaster = new THREE.Raycaster();
        raycaster.setFromCamera(new THREE.Vector2(mouseX, mouseY), camera);
        
        // Find intersection point with the plane
        const intersectionPoint = new THREE.Vector3();
        raycaster.ray.intersectPlane(plane, intersectionPoint);
        
        // Get the main sphere's physics body
        const selectedBody = physicsBodiesRef.current[0];
        
        // Move the sphere directly to the intersection point
        selectedBody.position.set(intersectionPoint.x, 0, intersectionPoint.z);
        selectedBody.velocity.set(0, 0, 0);
        selectedBody.angularVelocity.set(0, 0, 0);

        // Update visual position
        sphere.position.copy(selectedBody.position);
        sphere.quaternion.copy(selectedBody.quaternion);

        // Sound control
        const totalDeltaY = event.clientY - startYRef.current;
        const noteIndex = Math.floor(Math.abs(totalDeltaY) / 50);
        const newIndex = Math.max(0, Math.min(notes.length - 1, noteIndex));
        const newNote = notes[newIndex];
        
        if (newNote !== currentNoteRef.current) {
          currentNoteRef.current = newNote;
          const baseNoteIndex = notes.indexOf(currentNoteRef.current);
          const chordNotes = getChordNotes(baseNoteIndex);
          synth.releaseAll();
          synth.triggerAttack(chordNotes);
        }

        const pressDuration = (Date.now() - pressStartTimeRef.current) / 1000;
        currentVolumeRef.current = Math.min(0, -20 + pressDuration * 10);
        synth.volume.value = currentVolumeRef.current;
      }
    }

    function onMouseUp() {
      if (isDraggingRef.current) {
        isDraggingRef.current = false;
        synth.releaseAll();
      }
    }

    // Event listeners
    window.addEventListener('mousedown', onMouseDown);
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('mouseup', onMouseUp);

    // Handle window resize
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener('resize', handleResize);

    // Animation loop
    function animate() {
      requestAnimationFrame(animate);
      
      // Update physics
      world.step(1/60);
      
      // Update main sphere
      if (sphereRef.current && physicsBodiesRef.current[0]) {
        sphereRef.current.position.copy(physicsBodiesRef.current[0].position);
        sphereRef.current.quaternion.copy(physicsBodiesRef.current[0].quaternion);
      }

      // Update surrounding spheres
      spheresRef.current.forEach((surroundingSphere, index) => {
        if (physicsBodiesRef.current[index + 1]) {
          surroundingSphere.position.copy(physicsBodiesRef.current[index + 1].position);
          surroundingSphere.quaternion.copy(physicsBodiesRef.current[index + 1].quaternion);
        }
      });

      renderer.render(scene, camera);
    }
    animate();

    // Cleanup
    return () => {
      window.removeEventListener('mousedown', onMouseDown);
      window.removeEventListener('mousemove', onMouseMove);
      window.removeEventListener('mouseup', onMouseUp);
      window.removeEventListener('resize', handleResize);
      mountRef.current?.removeChild(renderer.domElement);
      synth.dispose();
    };
  }, []);

  return <div ref={mountRef} />;
};

export default CubeSynth; 